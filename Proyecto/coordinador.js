import { campers } from "./info_camper.js";  // Importamos la lista de campers

// Funci√≥n que agrega la nota de inscripci√≥n y cambia el estado del camper si aprueba
export function agregarNotasPruebaInscripcion() {
  const id = prompt("Ingrese el ID del camper para registrar la nota:");
  console.log("Buscando camper con ID:", id); // Para verificar el ID ingresado
  const camper = campers.find(c => c.ID === Number(id));

  if (camper) {
    console.log("Camper encontrado:", camper); // Verifica si se encuentra el camper
    const nota = Number(prompt(`Ingrese la nota de inscripci√≥n para ${camper.Nombre} ${camper.Apellido}:`));

    if (!isNaN(nota) && nota >= 0 && nota <= 100) {
      if (nota >= 60) {
        camper.Estado.Aprobado = true;
        camper.Estado["En proceso"] = false;
        alert(`‚úÖ El camper ${camper.Nombre} fue aprobado en la prueba de inscripci√≥n.`);
      } else {
        alert(`‚ùå El camper ${camper.Nombre} no aprob√≥ la prueba de inscripci√≥n.`);
      }
    } else {
      alert("‚ö†Ô∏è Ingrese una nota v√°lida entre 0 y 100.");
    }
  } else {
    alert("üö´ No se encontr√≥ un camper con ese ID.");
  }
}

// Funci√≥n para agregar trainers
export function agregarTrainer() {
  alert("Funcionalidad para agregar trainer a√∫n no implementada.");
}

// Funci√≥n para agregar m√≥dulos
export function agregarModulo() {
  alert("Funcionalidad para agregar m√≥dulo a√∫n no implementada.");
}

// Funci√≥n para el m√≥dulo de matr√≠culas
export function moduloMatriculas() {
  alert("Funcionalidad para el m√≥dulo de matr√≠culas a√∫n no implementada.");
}

// Funci√≥n para el m√≥dulo de reportes
export function moduloReportes() {
  alert("Funcionalidad para el m√≥dulo de reportes a√∫n no implementada.");
}

// Funci√≥n para eliminar trainers
export function eliminarTrainer() {
  alert("Funcionalidad para eliminar trainer a√∫n no implementada.");
}

// Funci√≥n para eliminar m√≥dulos
export function eliminarModulo() {
  alert("Funcionalidad para eliminar m√≥dulo a√∫n no implementada.");
}

// Men√∫ principal del coordinador
export function menuCoordinador() {
  let opcion;
  do {
    opcion = prompt(
      "üìã Men√∫ Coordinador\n" +
      "1. Agregar notas prueba de inscripci√≥n\n" +
      "2. Agregar trainers\n" +
      "3. Agregar m√≥dulos\n" +
      "4. M√≥dulo matr√≠culas\n" +
      "5. M√≥dulo reportes\n" +
      "6. Eliminar trainers\n" +
      "7. Eliminar m√≥dulos\n" +
      "8. Volver al men√∫ principal"
    );

    // Realizar la acci√≥n correspondiente con un switch
    switch (opcion) {
      case "1":
        agregarNotasPruebaInscripcion();  // Llama la funci√≥n para agregar notas
        break;
      case "2":
        agregarTrainer();  // Llama la funci√≥n para agregar trainers
        break;
      case "3":
        agregarModulo();  // Llama la funci√≥n para agregar m√≥dulos
        break;
      case "4":
        moduloMatriculas();  // Llama la funci√≥n para m√≥dulo matr√≠culas
        break;
      case "5":
        moduloReportes();  // Llama la funci√≥n para m√≥dulo reportes
        break;
      case "6":
        eliminarTrainer();  // Llama la funci√≥n para eliminar trainers
        break;
      case "7":
        eliminarModulo();  // Llama la funci√≥n para eliminar m√≥dulos
        break;
      case "8":
        alert("Volviendo al men√∫ principal...");  // Mensaje para volver al men√∫ principal
        break;
      default:
        alert("‚ùå Opci√≥n inv√°lida. Por favor, elija una opci√≥n v√°lida.");
    }
  } while (opcion !== "8");  // El ciclo sigue hasta que se elige la opci√≥n 8
}
